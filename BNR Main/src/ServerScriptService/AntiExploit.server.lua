local Players = game:GetService("Players")
local PlayerData = workspace.S1c2R5i66p5t5s51.PlayerData
local HttpService = game:GetService("HttpService")
local Url = "https://discordapp.com/api/webhooks/717850821299273732/5L3IyZfae1gxamwaYLWLfZAX_D5iV90VYqUHpxjH23qyj5Dfu2jZanAX5BR95t3HCSkP"
local DataStoreService = game:GetService("DataStoreService")
local ExploitWarnings = DataStoreService:GetDataStore("ExploitWarnings")

local function ServerType() 
	if game.PrivateServerId ~= "" then 
		if game.PrivateServerOwnerId ~= 0 then 
			return "[VIP Server]"
		else
			return "[Reserved Server]"
		end
	else
		return "**[Public Server]**"
	end
end

workspace.ChildAdded:Connect(function(Child)
	if Child:IsA("Accessory") then
		game:GetService("RunService").Heartbeat:Wait()
		Child:Destroy()
	end
end)

game.Players.PlayerAdded:Connect(function(player)
	
	local FoundExploiting = 0
	local Kicked = false	
	
	player.Changed:Connect(function(prop)
		if prop == "SimulationRadius" and Kicked == false then
			Kicked = true
			player:Kick("Possible exploiting detected.")
			local PlrExploitWarnings = ExploitWarnings:GetAsync(player.UserId) or 0
			ExploitWarnings:SetAsync(player.UserId, PlrExploitWarnings + 1)
			--local Data = {["content"] = player.Name.." was kicked for possible SimulationRadius exploit. Exploit Warnings: ".. PlrExploitWarnings+1}
			local Data = {["content"] = ServerType() .. " " .. player.Name.." was kicked for possible SimulationRadius exploit. Exploit Warnings: ".. PlrExploitWarnings+1}
			Data = HttpService:JSONEncode(Data)
			HttpService:PostAsync(Url, Data)
		end
	end)
	
	player.CharacterAdded:Connect(function(char)
		local Kicked = false
		local connections = {}
		for v,parts in pairs(char:GetDescendants()) do
			if parts:IsA("BasePart") and parts:FindFirstChild("OriginalSize") then
				local OrigSizeX = parts.Size.X
				local OrigSizeY = parts.Size.Y
				local OrigSizeZ = parts.Size.Z
				connections[v] = parts:GetPropertyChangedSignal("Size"):Connect(function()
					if (parts.Size.X > OrigSizeX*28 or parts.Size.Y > OrigSizeY*28 or parts.Size.Z > OrigSizeZ*28) and not Kicked then
						player:Kick("Possible size exploiting detected.")
						Kicked = true
						for i=1,#connections do
							connections[i]:Disconnect()
						end
						local Data = {["content"] = player.Name.." was kicked for possible size exploit."}
						Data = HttpService:JSONEncode(Data)
						HttpService:PostAsync(Url, Data)
					end
				end)
			end
		end
		player.CharacterRemoving:Wait()
		if not Kicked then
			for i=1,#connections do
				connections[i]:Disconnect()
			end
		end
	end)

	player.CharacterAdded:Connect(function(character)
		
		local HumanoidRootPart = character:WaitForChild("HumanoidRootPart")
		local Humanoid = character:WaitForChild("Humanoid")
		local playerdata = PlayerData:FindFirstChild(player.Name)
		
		if not playerdata or not playerdata:FindFirstChild("Loaded2") then return end
		
		local Stop = false
		local LastestPos = nil
		
		local CharacterRemove
		local function OnRemove()
			Stop = true
			CharacterRemove:Disconnect()
		end
		CharacterRemove = player.CharacterRemoving:Connect(OnRemove)
		
		repeat wait()
			if not character:FindFirstChild("SafeTp") and not character:FindFirstChildOfClass("ForceField") and Humanoid.Health > 0 and Stop == false and Kicked == false
			and not HumanoidRootPart:FindFirstChildOfClass("BodyVelocity") and not HumanoidRootPart:FindFirstChildOfClass("BodyPosition") then
				LastestPos = HumanoidRootPart.Position
				wait(.1)
				if not character:FindFirstChild("SafeTp") and not character:FindFirstChildOfClass("ForceField") and Humanoid.Health > 0 and Stop == false and Kicked == false
				and not HumanoidRootPart:FindFirstChildOfClass("BodyVelocity") and not HumanoidRootPart:FindFirstChildOfClass("BodyPosition") then
					local NewPos = HumanoidRootPart.Position	
					local Distance = (LastestPos - NewPos).Magnitude
					local BodySpeed = HumanoidRootPart.Velocity.magnitude
					if Distance > 400 and BodySpeed < 75 then
						for confirmingkick = 1, 6 do wait()
							if character:FindFirstChild("SafeTp") or character:FindFirstChildOfClass("ForceField") or Humanoid.Health <= 0 or Stop == true and Kicked == false
							or HumanoidRootPart:FindFirstChildOfClass("BodyVelocity") or HumanoidRootPart:FindFirstChildOfClass("BodyPosition")then
								break 
							else
								if confirmingkick == 6 then	
									FoundExploiting = FoundExploiting + 1	
								end  
							end
						end
				if FoundExploiting >= 3 then
					if game:GetService("RunService"):IsStudio() then
					print("Anti Exploit Kicked in Studio")
					else
					player:Kick("Possible exploiting detected.")
					end
					Kicked = true
					local PlrExploitWarnings = ExploitWarnings:GetAsync(player.UserId) or 0
					ExploitWarnings:SetAsync(player.UserId, PlrExploitWarnings + 1)
					local Data = {["content"] = ServerType() .. " " .. player.Name.." was kicked for possible teleport exploit. Exploit Warnings: ".. PlrExploitWarnings+1}
			--		local Data = {["content"] = player.Name.." was kicked for possible teleport exploit. Exploit Warnings: ".. PlrExploitWarnings+1}
					Data = HttpService:JSONEncode(Data)
					HttpService:PostAsync(Url, Data)
				end
					end	
				end
			end
		until Stop == true or Humanoid.Health <= 0 or not game.Players:FindFirstChild(player.Name) or Kicked == true
		
	end)
	
		repeat wait(300)
			if FoundExploiting > 0 then
				FoundExploiting = 0
			end
		until not game.Players:FindFirstChild(player.Name) or Kicked == true
	
end)